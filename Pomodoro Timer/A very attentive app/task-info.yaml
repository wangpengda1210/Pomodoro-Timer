type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'com.android.application'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'

    android {
      compileSdkVersion 29

      defaultConfig {
        applicationId "org.hyperskill.pomodoro"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.edu.AndroidEduTestRunner"
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
      }

      buildTypes {
        release {
          minifyEnabled false
          proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
      }
    }

    dependencies {
      implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
      implementation 'androidx.core:core-ktx:1.2.0'
      implementation 'androidx.appcompat:appcompat:1.1.0'
      implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
      implementation 'com.android.support.constraint:constraint-layout:1.1.3'
      testImplementation 'junit:junit:4.12'
      testImplementation 'org.robolectric:robolectric:4.2.1'
      androidTestImplementation 'androidx.test.ext:junit:1.1.1'
      androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
      androidTestImplementation 'androidx.test:rules:1.2.0'

      // required if you want to use Mockito for unit tests
      testImplementation 'org.mockito:mockito-core:2.7.22'
      // required if you want to use Mockito for Android tests
      androidTestImplementation 'org.mockito:mockito-android:2.7.22'
      androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    }
  learner_created: false
- name: src/main/AndroidManifest.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android"
        package="org.hyperskill.pomodoro">

      <application
          android:allowBackup="true"
          android:icon="@mipmap/ic_launcher"
          android:label="@string/app_name"
          android:roundIcon="@mipmap/ic_launcher_round"
          android:supportsRtl="true"
          android:theme="@style/AppTheme">
        <activity android:name="org.hyperskill.pomodoro.MainActivity">
          <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
          </intent-filter>
        </activity>
      </application>

    </manifest>
  learner_created: false
- name: src/main/res/layout/activity_main.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        xmlns:tools="http://schemas.android.com/tools"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity"/>
  learner_created: false
- name: src/main/res/values/colors.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <color name="colorPrimary">#008577</color>
        <color name="colorPrimaryDark">#00574B</color>
        <color name="colorAccent">#D81B60</color>
    </resources>
  learner_created: false
- name: src/main/res/values/styles.xml
  visible: true
  text: |
    <resources>

        <!-- Base application theme. -->
        <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
            <!-- Customize your theme here. -->
            <item name="colorPrimary">@color/colorPrimary</item>
            <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
            <item name="colorAccent">@color/colorAccent</item>
        </style>

    </resources>
  learner_created: false
- name: src/main/res/values/strings.xml
  visible: true
  text: |
    <resources>
        <string name="app_name">Pomodoro Timer</string>
        <string name="clear_notifications">CLEAR ALL</string>
    </resources>
  learner_created: false
- name: src/main/res/drawable/ic_launcher_background.xml
  visible: true
  text: |
    <?xml version="1.0" encoding="utf-8"?>
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillColor="#008577"
            android:pathData="M0,0h108v108h-108z" />
        <path
            android:fillColor="#00000000"
            android:pathData="M9,0L9,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,0L19,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,0L29,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,0L39,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,0L49,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,0L59,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,0L69,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,0L79,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M89,0L89,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M99,0L99,108"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,9L108,9"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,19L108,19"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,29L108,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,39L108,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,49L108,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,59L108,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,69L108,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,79L108,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,89L108,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M0,99L108,99"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,29L89,29"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,39L89,39"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,49L89,49"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,59L89,59"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,69L89,69"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M19,79L89,79"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M29,19L29,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M39,19L39,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M49,19L49,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M59,19L59,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M69,19L69,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
        <path
            android:fillColor="#00000000"
            android:pathData="M79,19L79,89"
            android:strokeWidth="0.8"
            android:strokeColor="#33FFFFFF" />
    </vector>
  learner_created: false
- name: src/main/res/drawable-v24/ic_launcher_foreground.xml
  visible: true
  text: |
    <vector xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:aapt="http://schemas.android.com/aapt"
        android:width="108dp"
        android:height="108dp"
        android:viewportWidth="108"
        android:viewportHeight="108">
        <path
            android:fillType="evenOdd"
            android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000">
            <aapt:attr name="android:fillColor">
                <gradient
                    android:endX="78.5885"
                    android:endY="90.9159"
                    android:startX="48.7653"
                    android:startY="61.0927"
                    android:type="linear">
                    <item
                        android:color="#44000000"
                        android:offset="0.0" />
                    <item
                        android:color="#00000000"
                        android:offset="1.0" />
                </gradient>
            </aapt:attr>
        </path>
        <path
            android:fillColor="#FFFFFF"
            android:fillType="nonZero"
            android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
            android:strokeWidth="1"
            android:strokeColor="#00000000" />
    </vector>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
        <background android:drawable="@drawable/ic_launcher_background" />
        <foreground android:drawable="@drawable/ic_launcher_foreground" />
    </adaptive-icon>
  learner_created: false
- name: src/main/java/org/hyperskill/pomodoro/MainActivity.kt
  visible: true
  text: |-
    package org.hyperskill.pomodoro

    import android.os.Bundle
    import androidx.appcompat.app.AppCompatActivity

    class MainActivity : AppCompatActivity() {
        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            setContentView(R.layout.activity_main)
        }
    }
  learner_created: false
- name: src/test/java/org/hyperskill/pomodoro/ExampleUnitTest.kt
  visible: true
  text: |
    package org.hyperskill.pomodoro

    import org.junit.Assert
    import org.junit.Test

    class ExampleUnitTest {
        @Test
        fun testSolution() {
            //TODO: implement your test here
            Assert.assertTrue("STAGE 2:Tests not implemented for the task", true)
        }
    }
  learner_created: false
- name: src/androidTest/java/com/edu/AndroidEduTestRunner.kt
  visible: false
  text: |
    package com.edu

    import androidx.test.runner.AndroidJUnitRunner

    class AndroidEduTestRunner : AndroidJUnitRunner() {
        override fun sendStatus(resultCode: Int, results: android.os.Bundle) {
            testNum++
            if (resultCode < 0) {
                val stack = results.getString("stack")
                if (stack != null) {
                    val errorMessage = stack.substringAfter(":").trim().substringBefore("\n")
                    results.putString("stack", "#educational_plugin FAILED + " +
                            "Wrong answer in test #${testNum / 2} $errorMessage")
                }
            }
            super.sendStatus(resultCode, results)
        }

        companion object {
            var testNum = 0
        }
    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/Matchers/ColorTimerMatcher.java
  visible: false
  text: |
    package org.hyperskill.pomodoro.Matchers;

    import androidx.test.espresso.matcher.BoundedMatcher;
    import android.view.View;

    import org.hamcrest.Description;
    import org.hyperskill.pomodoro.timer.TimerView;

    public class ColorTimerMatcher extends BoundedMatcher<View, TimerView> {

        private int color;

        public ColorTimerMatcher(int color) {
            super(TimerView.class);
            this.color = color;
        }

        public static ColorTimerMatcher withColor(int color) {
            return new ColorTimerMatcher(color);
        }

        @Override
        protected boolean matchesSafely(TimerView item) {
            return item.getColor() == color;
        }

        @Override
        public void describeTo(Description description) {
            description.appendText("getColor should return ").appendValue(color);
        }
    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/TimerStateInstrumentedTest.java
  visible: false
  text: |-
    package org.hyperskill.pomodoro;

    import android.graphics.Color;
    import androidx.test.espresso.action.ViewActions;
    import androidx.test.rule.ActivityTestRule;
    import androidx.test.ext.junit.runners.AndroidJUnit4;

    import org.hyperskill.pomodoro.Matchers.ColorTimerMatcher;
    import org.hyperskill.pomodoro.Matchers.TextTimerMatcher;
    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.runner.RunWith;

    import static androidx.test.espresso.Espresso.onView;
    import static androidx.test.espresso.assertion.ViewAssertions.matches;
    import static androidx.test.espresso.matcher.ViewMatchers.withId;

    /**
     * Instrumented test, which will execute on an Android device.
     *
     * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
     */
    @RunWith(AndroidJUnit4.class)
    public class TimerStateInstrumentedTest {

        @Rule
        public ActivityTestRule<MainActivity> mActivityRule
                = new ActivityTestRule<>(MainActivity.class);

        @Test
        public void timerViewExist() {
            onView(withId(R.id.timerView)).perform(ViewActions.click());
            onView(withId(R.id.timerView)).check(matches(TextTimerMatcher.withText("00:05")));
        }

        @Test
        public void startTimer() throws InterruptedException {
            onView(withId(R.id.startButton)).perform(ViewActions.click());
            onView(withId(R.id.timerView)).check(matches(ColorTimerMatcher.withColor(Color.RED)));
            Thread.sleep(5000);
            onView(withId(R.id.timerView)).check(matches(ColorTimerMatcher.withColor(Color.GREEN)));
            Thread.sleep(10000);
            onView(withId(R.id.timerView)).check(matches(ColorTimerMatcher.withColor(Color.YELLOW)));
        }

        @Test
        public void resetTimer() throws InterruptedException {
            onView(withId(R.id.startButton)).perform(ViewActions.click());
            Thread.sleep(4000);
            onView(withId(R.id.timerView)).check(matches(TextTimerMatcher.withText("00:00")));
            onView(withId(R.id.resetButton)).perform(ViewActions.click());
            onView(withId(R.id.timerView)).check(matches(TextTimerMatcher.withText("00:05")));
        }

        @Test
        public void interruptTimer() throws InterruptedException {
            onView(withId(R.id.startButton)).perform(ViewActions.click());
            Thread.sleep(2000);
            startTimer();
        }

    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/Matchers/TextTimerMatcher.java
  visible: false
  text: |
    package org.hyperskill.pomodoro.Matchers;

    import androidx.test.espresso.matcher.BoundedMatcher;
    import android.view.View;

    import org.hamcrest.Description;
    import org.hyperskill.pomodoro.timer.TimerView;

    public class TextTimerMatcher extends BoundedMatcher<View, TimerView> {
        private String text;

        private TextTimerMatcher(String text) {
            super(TimerView.class);
            this.text = text;
        }

        public static TextTimerMatcher withText(String text) {
            return new TextTimerMatcher(text);
        }

        @Override
        protected boolean matchesSafely(TimerView item) {
            return item.getText().equals(text);
        }

        @Override
        public void describeTo(Description description) {
            description.appendText("getText should return ").appendValue(text);
        }
    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/NotificationInstrumentedTest.java
  visible: false
  text: |
    package org.hyperskill.pomodoro;

    import androidx.test.InstrumentationRegistry;
    import androidx.test.espresso.action.ViewActions;
    import androidx.test.rule.ActivityTestRule;
    import androidx.test.ext.junit.runners.AndroidJUnit4;

    import androidx.test.uiautomator.By;
    import androidx.test.uiautomator.UiDevice;
    import androidx.test.uiautomator.UiObject2;
    import androidx.test.uiautomator.Until;

    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.runner.RunWith;

    import static androidx.test.espresso.Espresso.onView;
    import static androidx.test.espresso.matcher.ViewMatchers.withText;
    import static junit.framework.TestCase.assertTrue;
    import static org.junit.Assert.assertEquals;

    @RunWith(AndroidJUnit4.class)
    public class NotificationInstrumentedTest {

        @Rule
        public ActivityTestRule<MainActivity> mActivityRule
                = new ActivityTestRule<>(MainActivity.class);

        @Test
        public void sendNotification() throws InterruptedException {
            onView(withText("Start")).perform(ViewActions.click());
            Thread.sleep(6000);
            String expectedContent = "It's time to stop";
            String expectedTitle = "You need a rest!!!";

            UiDevice uiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());

            uiDevice.openNotification();
            uiDevice.wait(Until.hasObject(By.pkg("com.android.systemui")), 10000);
            UiObject2 title = uiDevice.findObject(By.text(expectedTitle));
            UiObject2 text = uiDevice.findObject(By.textStartsWith(expectedContent));

            assertEquals(expectedTitle, title.getText());
            assertTrue(text.getText().startsWith(expectedContent));

            String clearButtonText = mActivityRule.getActivity().getString(R.string.clear_notifications);
            UiObject2 clearAll = uiDevice.findObject(By.text(clearButtonText));
            clearAll.click();
        }
    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/ExampleInstrumentedTest.java
  visible: false
  text: |
    package org.hyperskill.pomodoro;

    import androidx.test.espresso.action.ViewActions;
    import androidx.test.rule.ActivityTestRule;
    import androidx.test.ext.junit.runners.AndroidJUnit4;

    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.runner.RunWith;

    import static androidx.test.espresso.Espresso.onView;
    import static androidx.test.espresso.matcher.ViewMatchers.withId;

    /**
     * Instrumented test, which will execute on an Android device.
     *
     * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
     */
    @RunWith(AndroidJUnit4.class)
    public class ExampleInstrumentedTest {

        @Rule
        public ActivityTestRule<MainActivity> mActivityRule
                = new ActivityTestRule<>(MainActivity.class);

        @Test
        public void textViewExist() {
            onView(withId(R.id.timerView)).perform(ViewActions.click());
        }

        @Test
        public void startButtonExist() {
            onView(withId(R.id.startButton)).perform(ViewActions.click());
        }

        @Test
        public void resetButtonExist() {
            onView(withId(R.id.resetButton)).perform(ViewActions.click());
        }

    }
  learner_created: false
- name: src/androidTest/java/org/hyperskill/pomodoro/SettingButtonInstrumentedTest.java
  visible: false
  text: |
    package org.hyperskill.pomodoro;

    import android.graphics.Color;
    import androidx.test.espresso.matcher.ViewMatchers;
    import androidx.test.rule.ActivityTestRule;
    import androidx.test.ext.junit.runners.AndroidJUnit4;

    import org.hyperskill.pomodoro.Matchers.ColorTimerMatcher;
    import org.hyperskill.pomodoro.Matchers.TextTimerMatcher;
    import org.junit.Rule;
    import org.junit.Test;
    import org.junit.runner.RunWith;

    import static androidx.test.espresso.Espresso.onView;
    import static androidx.test.espresso.action.ViewActions.click;
    import static androidx.test.espresso.action.ViewActions.typeText;
    import static androidx.test.espresso.assertion.ViewAssertions.matches;
    import static androidx.test.espresso.matcher.RootMatchers.isDialog;
    import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;
    import static androidx.test.espresso.matcher.ViewMatchers.withId;
    import static androidx.test.espresso.matcher.ViewMatchers.withText;

    @RunWith(AndroidJUnit4.class)
    public class SettingButtonInstrumentedTest {
        @Rule
        public ActivityTestRule<MainActivity> mActivityRule
                = new ActivityTestRule<>(MainActivity.class);

        @Test
        public void settingButtonExist() {
            onView(withId(R.id.settingButton)).check(matches(isDisplayed()));
        }

        @Test
        public void openDialog() {
            onView(withId(R.id.settingButton)).perform(click());
            onView(withText("OK")).check(matches(isDisplayed()));
            onView(withText("Cancel")).check(matches(isDisplayed()));
        }

        @Test
        public void setWorkTime() throws InterruptedException {
            onView(withId(R.id.settingButton)).perform(click());
            onView(ViewMatchers.withId(R.id.workTime)).perform(typeText("6"));
            Thread.sleep(2000);
            onView(withText("OK")).inRoot(isDialog()) // <---
                    .check(matches(isDisplayed()))
                    .perform(click());
            Thread.sleep(2000);
            onView(withId(R.id.timerView)).check(matches(TextTimerMatcher.withText("00:06")));
            onView(withId(R.id.startButton)).perform(click());
            Thread.sleep(6000);
            onView(withId(R.id.timerView)).check(matches(ColorTimerMatcher.withColor(Color.GREEN)));
        }

        @Test
        public void setRestTime() throws InterruptedException {
            onView(withId(R.id.settingButton)).perform(click());
            onView(withId(R.id.restTime)).perform(typeText("5"));
            Thread.sleep(2000);
            onView(withText("OK")).inRoot(isDialog()) // <---
                    .check(matches(isDisplayed()))
                    .perform(click());
            Thread.sleep(2000);
            onView(withId(R.id.startButton)).perform(click());
            Thread.sleep(5000);
            onView(withId(R.id.timerView)).check(matches(TextTimerMatcher.withText("00:00")));
            onView(withId(R.id.timerView)).check(matches(ColorTimerMatcher.withColor(Color.GREEN)));
        }
    }
  learner_created: false
- name: src/main/java/org/hyperskill/pomodoro/timer/TimerView.kt
  visible: true
  text: "package org.hyperskill.pomodoro.timer\n\nimport android.animation.ValueAnimator\n\
    import android.content.Context\nimport android.graphics.*\nimport android.util.AttributeSet\n\
    import android.view.View\nimport android.view.animation.LinearInterpolator\nimport\
    \ java.util.concurrent.TimeUnit\n\n\nclass TimerView : View {\n    \n    private\
    \ val ARC_START_ANGLE = 270\n    private val THICKNESS_SCALE = 0.03f\n    \n \
    \   private lateinit var mBitMap: Bitmap\n    private lateinit var mCanvas: Canvas\n\
    \    \n    private var mCirclePaint: Paint\n    private var mErasePaint: Paint\n\
    \    private var mTextPaint: Paint\n    \n    private lateinit var mCircleInnerBounds:\
    \ RectF\n    private lateinit var mCircleOuterBounds: RectF\n    \n    private\
    \ var mCircleSweepAngle = 0f\n    private var mTimerAnimator: ValueAnimator? =\
    \ null\n    \n    var timerText = \"00:00\"\n    var circleColor = Color.RED\n\
    \    private val textSize = 200f\n    \n    \n    constructor(context: Context)\
    \ : this(context, null)\n    constructor(context: Context, set: AttributeSet?)\
    \ : this(context, set, 0)\n    constructor(context: Context, set: AttributeSet?,\
    \ defStyleAttr: Int) : super(context, set, defStyleAttr) {\n    \n        mCirclePaint\
    \ = Paint()\n        mCirclePaint.isAntiAlias = true\n        mCirclePaint.color\
    \ = circleColor\n        \n        mErasePaint = Paint()\n        mErasePaint.isAntiAlias\
    \ = true\n        mErasePaint.color = Color.TRANSPARENT\n        mErasePaint.xfermode\
    \ = PorterDuffXfermode(PorterDuff.Mode.CLEAR)\n        \n        mTextPaint =\
    \ Paint()\n        mTextPaint.isAntiAlias = true\n        mTextPaint.color = Color.BLACK\n\
    \        mTextPaint.textSize = textSize\n    \n    }\n    \n    override fun onSizeChanged(w:\
    \ Int, h: Int, oldw: Int, oldh: Int) {\n        if (w != oldw || h != oldh) {\n\
    \            mBitMap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)\n  \
    \          mBitMap.eraseColor(Color.TRANSPARENT)\n            mCanvas = Canvas(mBitMap)\n\
    \        }\n        \n        super.onSizeChanged(w, h, oldw, oldh)\n        updateBounds()\n\
    \    }\n    \n    override fun onMeasure(widthMeasureSpec: Int, heightMeasureSpec:\
    \ Int) {\n        super.onMeasure(widthMeasureSpec, widthMeasureSpec)\n    }\n\
    \    \n    private fun updateBounds() {\n        val thickness = width * THICKNESS_SCALE;\n\
    \        \n        mCircleOuterBounds = RectF(0F, 0F, width.toFloat(), height.toFloat())\n\
    \        mCircleInnerBounds = RectF(mCircleOuterBounds.left + thickness,\n   \
    \             mCircleOuterBounds.top + thickness,\n                mCircleOuterBounds.right\
    \ - thickness,\n                mCircleOuterBounds.bottom - thickness)\n     \
    \   \n        invalidate()\n    }\n    \n    override fun onDraw(canvas: Canvas?)\
    \ {\n        mCanvas.drawColor(0, PorterDuff.Mode.CLEAR)\n        \n        mCirclePaint.color\
    \ = circleColor\n        mCanvas.drawArc(mCircleOuterBounds, 270f,\n         \
    \       mCircleSweepAngle, true, mCirclePaint)\n        mCanvas.drawOval(mCircleInnerBounds,\
    \ mErasePaint)\n        \n        mCanvas.drawText(timerText, width / 2f - timerText.length\
    \ * textSize / 4f,\n                height / 2f + textSize / 4f, mTextPaint)\n\
    \    \n        canvas?.drawBitmap(mBitMap, 0f, 0f, null)\n    }\n    \n    fun\
    \ start(secs: Int) {\n        stop()\n        mTimerAnimator = ValueAnimator.ofFloat(0f,\
    \ 1f)\n        mTimerAnimator!!.duration = TimeUnit.SECONDS.toMillis(secs.toLong())\n\
    \        mTimerAnimator!!.interpolator = LinearInterpolator()\n        mTimerAnimator!!.addUpdateListener\
    \ { animation -> drawProgress(animation.animatedValue as Float) }\n        mTimerAnimator!!.start()\n\
    \    }\n    \n    fun stop() {\n        if (mTimerAnimator != null) {\n      \
    \      if (mTimerAnimator!!.isRunning) mTimerAnimator!!.cancel()\n           \
    \ mTimerAnimator = null\n            drawProgress(0f)\n        }\n    }\n    \n\
    \    private fun drawProgress(progress: Float) {\n        mCircleSweepAngle =\
    \ 360 * progress\n        invalidate()\n    }\n    \n    fun getText() = timerText\n\
    \    fun getColor() = circleColor\n    \n}"
  learner_created: true
- name: src/main/res/layout/dialog_settings.xml
  visible: true
  text: |-
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout
        xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/rest_time"
            android:textSize="20sp"
            android:layout_marginTop="5dp"
            android:layout_marginStart="5dp"
            android:textColor="@android:color/black" />

        <EditText
            android:id="@+id/restTime"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/rest_time1"
            android:layout_marginTop="5dp"
            android:layout_marginStart="5dp"
            android:inputType="number"
            android:maxLines="1" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/work_time"
            android:textSize="20sp"
            android:layout_marginTop="5dp"
            android:layout_marginStart="5dp"
            android:textColor="@android:color/black" />

        <EditText
            android:id="@+id/workTime"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/work_time1"
            android:layout_marginTop="5dp"
            android:layout_marginStart="5dp"
            android:inputType="number"
            android:maxLines="1" />

    </LinearLayout>
  learner_created: true
- name: src/main/java/org/hyperskill/pomodoro/util/NotificationUtils.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/72/stages/398/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/72/stages/398/implement">JetBrains
    Academy</a>
  time: Wed, 18 Nov 2020 09:28:15 UTC
record: -1
